on:
  push:
    branches:
      - master
      - backport/*
    tags:
      - v*.*.*
  pull_request:

name: Testing

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        system: [
          { os: ubuntu-latest, arch: x64 },
          { os: macos-11, arch: x64 },
          { os: macos-11, arch: arm64 },
          { os: windows-latest, arch: x64 },
          # { os: windows-latest, arch: x86 }
        ]
        version: [
          # { node: 12, runtime: node, target: 12.18.3 },
          { node: 14, runtime: node, target: 14.17.0 },
          { node: 16, runtime: node, target: 16.13.1 },
          # { node: 12.18.3, runtime: electron, target: 11.0.0 },
          # { node: 14.16.0, runtime: electron, target: 12.0.0 },
          # { node: 14.16.0, runtime: electron, target: 13.0.0 },
          # { node: 14.17.0, runtime: electron, target: 14.0.0 },
          # { node: 16.5.0, runtime: electron, target: 15.0.0 },
          # { node: 16.9.1, runtime: electron, target: 16.0.0 },
          { node: 16.13.1, runtime: electron, target: 17.1.2 },
          { node: 16.13.2, runtime: electron, target: 18.0.4 }
        ]

    runs-on: ${{ matrix.system.os }}

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2

      - name: Install node
        uses: actions/setup-node@v3
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        with:
          node-version: ${{ matrix.version.node }}

      - name: Install Dependencies (Linux)
        if: matrix.system.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y ppa:git-core/ppa
          sudo apt-get update
          sudo apt-get install -y git build-essential clang python3 libssl-dev libkrb5-dev libc++-dev
          npm config set openssl_dir /usr/lib/ssl
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: Install Dependencies (MacOS)
        if: matrix.system.os == 'macos-11'
        run: npm config set openssl_dir /usr/local/opt/openssl@1.1

      - name: Install Dependencies (Windows x64)
        if: ${{ matrix.system.os == 'windows-latest' && matrix.system.arch == 'x64' }}
        run: |
          choco install visualstudio2022buildtools visualstudio2022-workload-vctools openssl -y --no-progress
          npm config set msvs_version 2022
          npm config set openssl_dir "C:\Program Files\OpenSSL-Win64"

      - name: Install Dependencies (Windows x86)
        if: ${{ matrix.system.os == 'windows-latest' && matrix.system.arch == 'x86' }}
        run: |
          choco install visualstudio2022buildtools visualstudio2022-workload-vctools -y --no-progress
          choco install openssl --x86 -y --no-progress
          npm config set msvs_version 2022
          npm config set openssl_dir "C:\Program Files (x86)\OpenSSL-Win32"

      - name: Setup Environment (Linux & MacOS)
        if: ${{ matrix.system.os == 'ubuntu-latest' || matrix.system.os == 'macos-11' }}
        run: |
          mkdir ~/.ssh_tests
          chmod 700 ~/.ssh_tests
          printf "%b" "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh_tests/config
          printf "%b" "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDBkHMoNRRkHYNE7EnQLdFxMgVcqGgNPYDhrWiLMlYuzpmEcUnhwW3zNaIa4J2JlGkRNgYZVia1Ic1V3koJPE3YO2+exAfJBIPeb6O1qDADc2hFFHzd28wmHKUkO61yzo2ZjDQfaEVtjN39Yiy19AbddN3bzNrgvuQT574fa6Rghl2RfecKYO77iHA1RGXIFc8heXVIUuUV/jHjb56WqoHH8vyt1DqUz89oyiHq8Cku0qzKN80COheZPseA1EvT0zlIgbXBxwijN4xRmvInK0fB5Kc9r3kddH2tT7V09bOFJsvGQaQmQ1WFTCqjpBFw1CHKcbfPLOxbLpVIR9gyx03R\n" > ~/.ssh_tests/id_rsa.pub
          printf "%b" "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAwZBzKDUUZB2DROxJ0C3RcTIFXKhoDT2A4a1oizJWLs6ZhHFJ\n4cFt8zWiGuCdiZRpETYGGVYmtSHNVd5KCTxN2DtvnsQHyQSD3m+jtagwA3NoRRR8\n3dvMJhylJDutcs6NmYw0H2hFbYzd/WIstfQG3XTd28za4L7kE+e+H2ukYIZdkX3n\nCmDu+4hwNURlyBXPIXl1SFLlFf4x42+elqqBx/L8rdQ6lM/PaMoh6vApLtKsyjfN\nAjoXmT7HgNRL09M5SIG1wccIozeMUZryJytHweSnPa95HXR9rU+1dPWzhSbLxkGk\nJkNVhUwqo6QRcNQhynG3zyzsWy6VSEfYMsdN0QIDAQABAoIBABsZNPYBEFy/wPvq\nNJ8/et3lCdkh/oc0ABIYK9Wo82XUKKvhDF3drZ3p+UrX/VYgf+EX9hyf8gVTuSJ3\nX1gRqDhIgeTxPsHGrwt6B6pL5ITnKEbbimuo9Ni1E+2RqUO0ZSCE/1sSRv4CRaXO\nk8HZawif7ttxv4bNUrLys6xEbpvQlOMzgs4s/OBB/XMEqnFRGPJeeTy8bkOWyTwl\nLj06nq2brs4qK4eijI/MoGy1CD8JCpL4gG39GPTXd8GpudXmdelDn1E0t9nhL6Se\naOMaiPhy7kBJD4wZ//WZTSR1XyjNBH3DGkNZxPIWcX+wJFyNoLbSbVSda/7Dtvp3\nCPfiNhECgYEA/+3JswSzcVEANNF5OLZ76x+TODkZ9T6YF4SR8/uJjNViWgUpX7vw\nmyXF+2AwzNaotbBKmNG619BcUeMmQB76c+UiMLeJuJcT/Jj0xmEUopHonGqEIcvg\nHg6cafE1is7d+l669bfjitlx+3muF2CYnylSN1LWHxIITVUj3BmcWqUCgYEAwZ45\nWdaHfK7G6GjI7liDQT4ZlslA8dmLv2Jl2ExBBMoY3m3Sre428z2ZFa4O/nsBYP0a\nDxgYmX20fQGcbPugKdCYHc7HkKbMU1GwiVCGpDYZCm2gJKTvam3dYNaiAfq5DyhP\nzDCZNJ5rrSMprXsuRv2O4c5u8qtJ5ByaOJBjOr0CgYBMlkAxzkpUssS5CaaZDiLv\nLbfEr3HRLjYdc5KpzLBQ8NpJzhmfiIJsK1Wf8B0qb2J1XJg2Oy0KwFOgPbWIoryY\nSg19Pq98Cdn1UWCOrSabr8ZIaKe55WTgGcc8/O3k6BsNfaO9PJZfSssNUlCCtml1\n18u+uo9RJPhPDBd7Gj7r8QKBgFraxWy7t24xkZMDgK4fiM/3tQhFvhz/CY2wPbxG\n5Ae8UfkmLcOCUfTIReqfd9fAnsAFZNIKa5izHRu/wsh9NwYIJSlvm8PsEVtTrPRy\nfgvWet+i24/2eYZGsag8b19gaLCNKQzXDT1czYg8RNVsRSX427BoLzXeXNkW9uNu\nFbI9AoGAV2kxcdcKS4BtNHKPeGgV87dM0DWhQaAtEXEIcQquFtba0lAXioGHg8U4\nzeiugl4Qzchwk5qd3wnZ4SOhx0s16/5gQDlnkbjFR6EREUnvLRwV92zBXUTOGIkh\nZ7Z4rcgUKlVAaHT3OHN/lTyqJG/ib+K4wZhbztl/ox+JUFsvD98=\n-----END RSA PRIVATE KEY-----\n" > ~/.ssh_tests/id_rsa
          chmod 600 ~/.ssh_tests/id_rsa*
          git config --global user.name "John Doe"
          git config --global user.email johndoe@example.com

      - name: Setup Environment (Windows)
        if: matrix.system.os == 'windows-latest'
        run: |
          git config --file C:\ProgramData\Git\config core.autocrlf input
          git config --system core.autocrlf input
          git config --global core.autocrlf input
          git config --global user.name "John Doe"
          git config --global user.email johndoe@example.com

      - name: Install
        if: ${{ matrix.system.os != 'macos-11' || matrix.system.arch != 'arm64' }}
        env:
          CC: clang
          CXX: clang++
          npm_config_clang: 1
          GYP_DEFINES: use_obsolete_asm=true
        run: npm ci --arch=${{ matrix.system.arch }} --target_arch=${{ matrix.system.arch }} --runtime=${{ matrix.version.runtime }} --target=${{ matrix.version.target }} ${{ matrix.version.runtime == 'electron' && '--disturl=https://electronjs.org/headers' || ''}} --build_from_source=true

      - name: Install (MacOS M1 arm64)
        if: ${{ matrix.system.os == 'macos-11' && matrix.system.arch == 'arm64' }}
        env:
          CC: clang
          CXX: clang++
          CFLAGS: -target arm64-apple-macos11
          npm_config_clang: 1
          GYP_DEFINES: use_obsolete_asm=true
        run: npm ci --arch=${{ matrix.system.arch }} --target_arch=${{ matrix.system.arch }} --runtime=${{ matrix.version.runtime }} --target=${{ matrix.version.target }} ${{ matrix.version.runtime == 'electron' && '--disturl=https://electronjs.org/headers' || ''}} --build_from_source=true

      - name: Test (Linux & MacOS)
        if: ${{ matrix.version.runtime == 'node' && matrix.system.arch == 'x64' && matrix.system.os != 'windows-latest' }}
        run: |
          set -e
          eval `ssh-agent -s`
          ssh-add ~/.ssh_tests/id_rsa
          node utils/retry npm test

      - name: Test (Windows)
        if: ${{ matrix.version.runtime == 'node' && matrix.system.arch == 'x64' && matrix.system.os == 'windows-latest' }}
        env:
          GIT_SSH: ${{ github.workspace }}\vendor\plink.exe
        run: |
          powershell -command "Start-Process ${{ github.workspace }}\vendor\pageant.exe ${{ github.workspace }}\vendor\private.ppk"
          node utils/retry npm test

      - name: Deploy
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          node_pre_gyp_bucket: ${{ secrets.node_pre_gyp_bucket }}
          AWS_ACCESS_KEY_ID: ${{ secrets.node_pre_gyp_accessKeyId }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.node_pre_gyp_secretAccessKey }}
        run: |
          npm install -g @mapbox/node-pre-gyp aws-sdk
          node lifecycleScripts/clean
          node-pre-gyp package --runtime=${{ matrix.version.runtime }} --target=${{ matrix.version.target }} --arch=${{ matrix.system.arch }} --target_arch=${{ matrix.system.arch }}
          node-pre-gyp publish
