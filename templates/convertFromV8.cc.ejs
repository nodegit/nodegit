<% if (!arg.isPayload) { -%>
  <%- arg.cType %> from_<%- arg.name %>;
  <% if (arg.isOptional) { -%>
    if (args[<%- jsArg %>]->Is<%- cppClassName2v8ValueClassName(arg.cppClassName) %>()) {
  <% } -%>
    <% if (arg.cppClassName == 'String') { -%>
      String::Utf8Value <%- arg.name %>(args[<%- jsArg %>]->ToString());
      from_<%- arg.name %> = strdup(*<%- arg.name %>);
    <% } else if (arg.cppClassName == 'Array') { -%>
      Array *tmp_<%- arg.name %> = Array::Cast(*args[<%- jsArg %>]);
      from_<%- arg.name %> = (<%- arg.cType %>)malloc(tmp_<%- arg.name %>->Length() * sizeof(<%- arg.cType.replace('**', '*') %>));
      for (unsigned int i = 0; i < tmp_<%- arg.name %>->Length(); i++) {
    <%
      // FIXME: should recursively call convertFromv8.
    %>
        from_<%- arg.name %>[i] = ObjectWrap::Unwrap<<%- arg.arrayElementCppClassName %>>(tmp_<%- arg.name %>->Get(Number::New(static_cast<double>(i)))->ToObject())->GetValue();
      }
    <% } else if (arg.cppClassName == "Function") { -%>
      Persistent<Function>::New(Local<Function>::Cast(args[<%- jsArg %>]));
    <% } else if (arg.cppClassName == 'Buffer') { -%>
      from_<%- arg.name %> = Buffer::Data(args[<%- jsArg %>]->ToObject());
    <% } else if (isV8Value(arg.cppClassName)) { -%>
      from_<%- arg.name %> = (<%- arg.cType %>) args[<%- jsArg %>]->To<%- arg.cppClassName %>()->Value();
    <% } else { -%>
      from_<%- arg.name %> = ObjectWrap::Unwrap<<%- arg.cppClassName %>>(args[<%- jsArg %>]->ToObject())->GetValue();
    <% } -%>
  <% if (arg.isOptional) { -%>
    } else {
      from_<%- arg.name %> = 0;
    }
  <% } -%>
<% } -%>